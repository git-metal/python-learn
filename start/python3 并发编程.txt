
Python3 线程中常用的两个模块为：
    _thread
    threading(推荐使用)
    thread 模块已被废弃。用户可以使用 threading 模块代替。所以，在 Python3 中不能再使用"thread" 模块。为了兼容性，Python3 将 thread 重命名为 "_thread"。

_thread使用：
    #创建新线程
        语法：_thread.start_new_thread ( function, args[, kwargs] )

threading使用：
    #方法
        run(): 用以表示线程活动的方法。
        start():启动线程活动。
        join([time]): 等待至线程中止。这阻塞调用线程直至线程的join() 方法被调用中止-正常退出或者抛出未处理的异常-或者是可选的超时发生。
        isAlive(): 返回线程是否活动的。
        getName(): 返回线程名。
        setName(): 设置线程名。
        threading.currentThread(): 返回当前的线程变量。
        threading.enumerate(): 返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程。
        threading.activeCount(): 返回正在运行的线程数量，与len(threading.enumerate())有相同的结果

    #从 threading.Thread 继承创建一个新的子类
        class myThread (threading.Thread):

    #创建新线程
        thread1 = myThread(1, "Thread-1", 1)

线程同步：
    #锁  
        threading.Lock：原子锁
        threading.RLock：可重入锁
            RLock允许在同一线程中被多次acquire。
        threading.Condition：
            可以把Condiftion理解为一把高级的琐，它提供了比Lock, RLock更高级的功能，允许我们能够控制复杂的线程同步问题。
            Condition在内部维护一个琐对象（默认是RLock），可以在创建Condigtion对象的时候把琐对象作为参数传入。
        threading.Semaphore：
        threading.BoundedSemaphore：
        threading.Event：
        threading.Barrier： 设置一个屏障，多个线程等条件达到后一起执行

    #threading.Timer：延迟启动
        
python3多进程：
    #fork （os.fork） Only works on Unix/Linux/Mac
        Unix/Linux操作系统提供了一个fork()系统调用，它非常特殊。普通的函数调用，调用一次，返回一次，但是fork()调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。
        子进程永远返回0，而父进程返回子进程的ID。这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用getppid()就可以拿到父进程的ID。
    
    #process:跨平台，支持Windows
        p = Process(target=run_proc, args=('test',))
        p.start()   #启动
        p.join()    #等待子进程结束后再继续往下运行

    #pool：进程池

    #subprocess：子进程

    #进程间同步
        #Lock （from multiprocessing import Lock）
            lock = Lock()
            lock.acquire()
            lock.release()

    #进程间共享数据
        #通过 Value和 Array共享

        #通过Manager()共享
            support types list, dict, Namespace, Lock, RLock, Semaphore, BoundedSemaphore, Condition, Event, Barrier, Queue, Value and Array



Queue:
    可以用于多进程和多线程之间通信吗，使线程和进程安全的
    #队列类型
        Queue：先进先出队列
        LifoQueue：后进先出队列
        PriorityQueue：优先级队列
        deque：双线队列，两端都可以操作

    #Queue方法
        task_done():意味着之前入队的一个任务已经完成。由队列的消费者线程调用。
        join():阻塞调用线程，直到队列中的所有任务被处理掉。
            当消费者线程调用task_done()（意味着有消费者取得任务并完成任务），未完成的任务数就会减少。当未完成的任务数降到0，join()解除阻塞。

Pipes：
    
    


